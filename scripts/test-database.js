const mongoose = require('mongoose');
const User = require('../models/User');
const Course = require('../models/Course');
const Semester = require('../models/Semester');
const Registration = require('../models/Registration');

// K·∫øt n·ªëi database
const connectDB = async () => {
    try {
        await mongoose.connect(process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/credit_registration', {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        console.log('‚úÖ MongoDB Connected successfully');
        return true;
    } catch (error) {
        console.error('‚ùå MongoDB connection error:', error.message);
        return false;
    }
};

// T·∫°o d·ªØ li·ªáu m·∫´u
const createSampleData = async () => {
    try {
        console.log('\nüîß Creating sample data...');

        // 1. T·∫°o semester m·∫´u
        const semester = new Semester({
            name: 'H·ªçc k·ª≥ 1 nƒÉm 2024-2025',
            code: 'HK1_2024_2025',
            academicYear: '2024-2025',
            semesterNumber: 1,
            startDate: new Date('2024-09-01'),
            endDate: new Date('2024-12-31'),
            registrationStartDate: new Date('2024-08-15'),
            registrationEndDate: new Date('2024-09-15'),
            withdrawalDeadline: new Date('2024-10-15'),
            isActive: true,
            isCurrent: true,
            maxCreditsPerStudent: 24,
            minCreditsPerStudent: 12
        });
        await semester.save();
        console.log('‚úÖ Created sample semester');

        // 2. T·∫°o admin user
        const admin = new User({
            firstName: 'Admin',
            lastName: 'System',
            email: 'admin@university.edu',
            password: 'admin123',
            role: 'admin'
        });
        await admin.save();
        console.log('‚úÖ Created admin user');

        // 3. T·∫°o teacher
        const teacher = new User({
            firstName: 'Nguy·ªÖn',
            lastName: 'VƒÉn Gi√°o',
            email: 'teacher@university.edu',
            password: 'teacher123',
            role: 'teacher'
        });
        await teacher.save();
        console.log('‚úÖ Created teacher user');

        // 4. T·∫°o student
        const student = new User({
            firstName: 'Tr·∫ßn',
            lastName: 'VƒÉn H·ªçc',
            email: 'student@university.edu',
            password: 'student123',
            role: 'student',
            major: 'C√¥ng ngh·ªá th√¥ng tin',
            year: 3,
            semester: 5,
            gpa: 3.2,
            currentCredits: 0,
            maxCredits: 24
        });
        await student.save();
        console.log('‚úÖ Created student user');

        // 5. T·∫°o course m·∫´u
        const course = new Course({
            courseCode: 'IT101',
            courseName: 'L·∫≠p tr√¨nh c∆° b·∫£n',
            credits: 3,
            description: 'Kh√≥a h·ªçc l·∫≠p tr√¨nh c∆° b·∫£n v·ªõi Java',
            department: 'C√¥ng ngh·ªá th√¥ng tin',
            major: 'C√¥ng ngh·ªá th√¥ng tin',
            teacher: teacher._id,
            semester: semester._id,
            schedule: {
                dayOfWeek: 2, // Th·ª© 2
                startTime: '08:00',
                endTime: '10:00',
                room: 'A101'
            },
            maxStudents: 30,
            currentStudents: 0,
            registrationDeadline: new Date('2024-09-15'),
            withdrawalDeadline: new Date('2024-10-15'),
            isActive: true,
            courseType: 'mandatory',
            yearLevel: 1,
            semesterNumber: 1
        });
        await course.save();
        console.log('‚úÖ Created sample course');

        console.log('\nüéâ Sample data created successfully!');
        console.log('\nüìã Login credentials:');
        console.log('üë®‚Äçüíº Admin: admin@university.edu / admin123');
        console.log('üë®‚Äçüè´ Teacher: teacher@university.edu / teacher123');
        console.log('üë®‚Äçüéì Student: student@university.edu / student123');

    } catch (error) {
        console.error('‚ùå Error creating sample data:', error.message);
    }
};

// Ki·ªÉm tra collections
const checkCollections = async () => {
    try {
        console.log('\nüìä Checking database collections...');

        const userCount = await User.countDocuments();
        const courseCount = await Course.countDocuments();
        const semesterCount = await Semester.countDocuments();
        const registrationCount = await Registration.countDocuments();

        console.log(`üë• Users: ${userCount}`);
        console.log(`üìö Courses: ${courseCount}`);
        console.log(`üìÖ Semesters: ${semesterCount}`);
        console.log(`üìù Registrations: ${registrationCount}`);

        return {
            users: userCount,
            courses: courseCount,
            semesters: semesterCount,
            registrations: registrationCount
        };
    } catch (error) {
        console.error('‚ùå Error checking collections:', error.message);
        return null;
    }
};

// Main function
const main = async () => {
    console.log('üöÄ Testing MongoDB Connection and Data...\n');

    // K·∫øt n·ªëi database
    const connected = await connectDB();
    if (!connected) {
        process.exit(1);
    }

    // Ki·ªÉm tra collections hi·ªán t·∫°i
    const stats = await checkCollections();

    // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, t·∫°o d·ªØ li·ªáu m·∫´u
    if (stats && stats.users === 0) {
        console.log('\nüìù No data found. Creating sample data...');
        await createSampleData();
    } else {
        console.log('\n‚úÖ Database already has data');
    }

    // Ki·ªÉm tra l·∫°i sau khi t·∫°o
    await checkCollections();

    console.log('\nüéØ Database is ready for use!');
    console.log('üåê You can now start the frontend and test the application');

    mongoose.connection.close();
    process.exit(0);
};

// Ch·∫°y script
main().catch(error => {
    console.error('‚ùå Script error:', error);
    process.exit(1);
});
